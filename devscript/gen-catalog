#!/usr/bin/env perl

use 5.010001;
use strict;
use warnings;
use FindBin '$Bin';
use Log::ger;
use Log::ger::App;

use Data::Dump;
use File::Slurper qw(write_text);
use HTTP::Tiny;

my $catalog_path = "$Bin/../devdata/catalog.csv";

sub _find_coin_name {
    my $safename = shift;

    my $fpath = "$Bin/../devdata/safename2name.csv";
    my %names;
    open my $fh, "<", $fpath or die;
    <$fh>;
    while (defined(my $line = <$fh>)) {
        chomp $line;
        my @ff = split /\t/, $line;
        $names{$ff[0]} = $ff[1];
    }
    close $fh;

    return $names{$safename} if $names{$safename};
    my $url = "https://coinmarketcap.com/currencies/$safename";
    my $res = HTTP::Tiny->new->get($url);
    if (!$res->{success}) {
        log_warn "Couldn't get $url: $res->{status} - $res->{reason}";
        return;
    }
    if ($res->{content} =~ /<title>(.+?) \([^)]+\) price/ ||
            $res->{content} =~ /^\s*"name": "(.+?)"/m) {
        open $fh, ">>", $fpath or die;
        print $fh "$safename\t$1\n";
        close $fh;
        return $1;
    } else {
        log_warn "Couldn't extract coin name from $url";
        return;
    }
}

my %code_change; # key = safename
LOAD_CODE_CHANGE: {
    open my $fh, "<", "$Bin/../devdata/code-change.csv" or die;
    <$fh>;
    while (defined(my $line = <$fh>)) {
        chomp $line;
        my @ff = split /\t/, $line;
        $code_change{$ff[0]} = $ff[1];
    }
}

my %name_change; # key = safename
LOAD_NAME_CHANGE: {
    open my $fh, "<", "$Bin/../devdata/name-change.csv" or die;
    <$fh>;
    while (defined(my $line = <$fh>)) {
        chomp $line;
        my @ff = split /\t/, $line;
        $name_change{$ff[0]} = $ff[1];
    }
}

my %completion; # key = incomplete name or safename
LOAD_COMPLETION: {
    open my $fh, "<", "$Bin/../devdata/completion.csv" or die;
    <$fh>;
    while (defined(my $line = <$fh>)) {
        chomp $line;
        my @ff = split /\t/, $line;
        $completion{$ff[0]} = $ff[1];
    }
}

my @scrape_result;
my %by_code;
my %by_safename;
my %by_name;
my %by_name_lc;
my $has_dup_name;
my $has_dup_code;
LOAD_SCRAPE_RESULT: {
    open my $fh, "<", "$Bin/../devdata/scrape-result.csv" or die;
    <$fh>;
    while (defined(my $line = <$fh>)) {
        chomp $line;
        my @ff = split /\t/, $line;
        my ($code, $name, $safename) = @ff;

        if ($code_change{$safename}) {
            $code = $code_change{$safename};
        }

        if ($name_change{$safename}) {
            $name = $name_change{$safename};
        }

        if ($completion{$safename}) {
            $name = $completion{$safename};
        } elsif ($completion{$name}) {
            $name = $completion{$name};
        }

        if ($name =~ /\.\.\./) {
            my $name2 = _find_coin_name($safename);
            $name = $name2 if $name;
        }

        $name =~ /\.\.\./ and die "Name '$name' still contains ellipsis";

        $by_code{$code} and do { warn "Duplicate code $code\n"; $has_dup_code++; next };
        $by_code{$code} = {name => $name, safename => $safename};

        $by_name_lc{lc $name}++ and do { warn "Duplicate name $name\n"; $has_dup_name++; next };
        $by_name{$name} = {safename => $safename, code => $code};

        $by_safename{$safename} and die "Duplicate safename $safename";
        $by_safename{$safename} = {name => $name, code => $code};

        push @scrape_result, [$code, $name, $safename];
    }
}

die if $has_dup_name || $has_dup_code;

@scrape_result = sort {$a->[0] cmp $b->[0]} @scrape_result;
write_text($catalog_path, join("", map {join("\t", @$_)."\n"} @scrape_result));
