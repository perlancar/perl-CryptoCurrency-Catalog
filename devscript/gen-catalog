#!/usr/bin/env perl

use 5.010001;
use strict;
use warnings;
use FindBin '$Bin';

use File::Slurper qw(write_text);
use Data::Dump;

my $catalog_path = "$Bin/../devdata/catalog.csv";

my %code_change; # key = safename
LOAD_CODE_CHANGE: {
    open my $fh, "<", "$Bin/../devdata/code-change.csv" or die;
    <$fh>;
    while (defined(my $line = <$fh>)) {
        chomp $line;
        my @ff = split /\t/, $line;
        $code_change{$ff[0]} = $ff[1];
    }
}

my %completion; # key = incomplete name or safename
LOAD_COMPLETION: {
    open my $fh, "<", "$Bin/../devdata/completion.csv" or die;
    <$fh>;
    while (defined(my $line = <$fh>)) {
        chomp $line;
        my @ff = split /\t/, $line;
        $completion{$ff[0]} = $ff[1];
    }
}

my @scrape_result;
my %by_code;
my %by_safename;
my %by_name;
my %by_name_lc;
LOAD_SCRAPE_RESULT: {
    open my $fh, "<", "$Bin/../devdata/scrape-result.csv" or die;
    <$fh>;
    while (defined(my $line = <$fh>)) {
        chomp $line;
        my @ff = split /\t/, $line;
        my ($code, $name, $safename) = @ff;

        if ($code_change{$safename}) {
            $code = $code_change{$safename};
        }

        if ($completion{$safename}) {
            $name = $completion{$safename};
        } elsif ($completion{$name}) {
            $name = $completion{$name};
        }

        $name =~ /\.\.\./ and die "Name '$name' still contains ellipsis";

        $by_code{$code} and die "Duplicate code $code";
        $by_code{$code} = {name => $name, safename => $safename};

        $by_name_lc{lc $name}++ and die "Duplicate name $name";
        $by_name{$name} = {safename => $safename, code => $code};

        $by_safename{$safename} and die "Duplicate safename $safename";
        $by_safename{$safename} = {name => $name, code => $code};

        push @scrape_result, [$code, $name, $safename];
    }
}

@scrape_result = sort {$a->[0] cmp $b->[0]} @scrape_result;
write_text($catalog_path, join("", map {join("\t", @$_)."\n"} @scrape_result));
